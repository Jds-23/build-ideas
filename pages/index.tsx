import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import Button from "../components/Button";
import IdeaCard from "../components/IdeaCard";
import useApp from "../state/app/hooks";
import useNft from "../state/app/useNft";
import useWallet from "../state/wallet/hooks/useWallet";
import { getDate } from "../utils";
import Modal from "../components/Modal";
import { jsonFile, storeFile, storeFiles } from "../utils/storeFile";
import { useSubgraph } from "../hooks/useSubgraph";
import useSortableData from "../hooks/useSortableData";

const Home: NextPage = () => {
  const [idea, setIdea] = useState("");
  const { account } = useWallet();
  const { mint, minting, balance } = useNft();
  const { mintIdea, mintingIdea, allWaves } = useApp();
  const [postIdeaModal, setPostIdeaModal] = useState(false);
  const [postedIdeaModal, setPostedIdeaModal] = useState(false);
  const data = useSubgraph();
  const { requestSort, items, sortConfig } = useSortableData(data);
  return (
    <div>
      <Head>
        <title>build_ideas</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PostIdeaModal
        open={postIdeaModal}
        setOpen={setPostIdeaModal}
        idea={idea}
        setIdea={setIdea}
        title={"Post A Idea"}
        mintIdea={mintIdea}
        mintingIdea={mintingIdea}
      />
      <main className="w-full px-4 mx-auto max-w-3xl flex flex-col items-center font-semibold">
        <h1 className="mt-12 text-2xl sm:text-4xl text-center sm:mt-20">
          🦄 Welcome, to buildspace idea board
        </h1>
        <p className="text-center text-lg mt-4 sm:mt-7">
          Buildspace Alumni can create ideas and vote or unvote them.
        </p>
        {account ? (
          <>
            <p className="text-center text-sm mt-3 sm:mt-6">
              Since, this is a testnet get your test NFT here.
            </p>
            <p className="text-center text-sm">
              Your NFT Balance will determine weight of your vote (NFT balance:{" "}
              {balance && balance.toString()})
            </p>
            <Button
              onClick={mint}
              loading={minting}
              className="text-sm mt-1 sm:mt-3 w-full max-w-[124px]"
            >
              {minting ? "Minting 🌟" : "Mint 🌟"}
            </Button>
          </>
        ) : (
          <>
            <p className="text-center text-sm mt-3 sm:mt-6">
              Please Connect your wallet.
            </p>
          </>
        )}

        <div className="mt-9 font-bold sm:mt-6 w-full">
          <div className="w-full flex items-center justify-between">
            <p className="text-base sm:text-xl">Ideas</p>
            <div className="flex text-xs sm:text-sm">
              <button
                onClick={() => requestSort("score")}
                className="font-bold mr-3"
              >
                _sort(by score)
              </button>
              <button
                onClick={() => requestSort("timestamp")}
                className="font-bold"
              >
                _sort(by time)
              </button>
              {/* <button className="font-bold">_filter</button> */}
            </div>
          </div>
          {balance && !balance.isZero() && (
            <div className="w-full p-2 mt-1 border border-strokes rounded-lg sm:mt-3 flex items-center">
              <input
                value={idea}
                onChange={(e) => setIdea(e.target.value)}
                placeholder="Mint a idea"
                className="bg-transparent w-full border-none text-base placeholder:text-gray-300 font-semibold"
              />
              <Button
                loading={mintingIdea}
                onClick={() => {
                  if (idea.length > 0) {
                    setPostIdeaModal(true);
                  }
                }}
                className="text-sm w-full ml-2 max-w-[124px]"
              >
                {mintingIdea ? "Minting Idea 💡" : "Mint Idea 💡"}
              </Button>
            </div>
          )}
          <div className="w-full mt-3">
            {items.map((idea) => {
              return (
                <IdeaCard
                  ideator={idea?.from ?? ""}
                  dateCreated={
                    idea?.timestamp
                      ? getDate(new Date(idea.timestamp * 1000))
                      : ""
                  }
                  downVotes={idea.downScore}
                  upVotes={idea.upScore}
                  idea={idea?.ideaStr ?? ""}
                  index={idea.id}
                  votesCount={idea.votesCount}
                  key={idea.id}
                />
              );
            })}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;

const PostIdeaModal = ({
  setOpen,
  open,
  title,
  mintIdea,
  idea,
  setIdea,
  mintingIdea,
}: {
  setOpen: (arg: boolean) => void;
  open: boolean;
  idea: string;
  setIdea: (arg: string) => void;
  title: string;
  mintIdea: (idea: string, metadata: string, deadline: string) => Promise<void>;
  mintingIdea: boolean;
}) => {
  const [endTime, setEndTime] = useState("");
  const [loading, setLoading] = useState(false);
  const [about, setAbout] = useState("");
  const [currentTime, setCurrentTime] = useState(
    new Date(Date.now()).toISOString()
  );
  useEffect(() => {
    function tick() {
      setCurrentTime(new Date(Date.now()).toISOString());
    }
    let id = setInterval(tick, 1000);
    return () => clearInterval(id);
  }, [currentTime]);
  const generateMetadata = async () => {
    try {
      setLoading(true);
      const data = jsonFile("metadata.json", {
        title,
        about,
      });
      const res = await storeFile(data, "metadata.json");
      console.log(res);
      setLoading(false);
      if (res) {
        setOpen(false);
        mintIdea(idea, res?.cid, endTime);
        setIdea("");
        setAbout("");
        return res;
      }
      return undefined;
    } catch (err) {
      setLoading(false);
      console.log(err);
      setOpen(false);
      mintIdea(idea, "", endTime);
      setIdea("");
      setAbout("");
    }
  };
  return (
    <Modal open={open} setOpen={setOpen} title={title}>
      <span className="text-sm font-semibold opacity-80">Title</span>
      <input
        value={idea}
        onChange={(e) => setIdea(e.target.value)}
        placeholder="Mint a idea"
        className="w-full p-2 font-semibold rounded-md border border-strokes"
      />
      <span className="mt-1 text-sm font-semibold opacity-80">Deadline</span>
      <input
        className="mb-1 w-full p-2 border-solid border-2 border-strokes rounded-md active:border-strokes focus:outline-none focus:shadow-outline grow"
        type="datetime-local"
        min={currentTime.substring(0, 16)}
        //   value={record}
        placeholder="Date"
        onChange={(e) => {
          const date = new Date(e.target.value);
          setEndTime((date.getTime() / 1000).toString());
          // console.log(e.target.value,(date.getTime()/1000))
        }}
      />
      <span className="mt-1 text-sm font-semibold opacity-80">About</span>
      <textarea
        className="mt-1 w-full p-2 border-solid border-2 border-strokes rounded-md active:border-strokes focus:outline-none focus:shadow-outline grow"
        value={about}
        onChange={(e) => {
          if (about.length <= 500) setAbout(e.target.value);
        }}
        placeholder="About (Markdown supported 📝)"
      />
      <span className="opacity-80 mb-1 w-full text-xs">{about.length}/500</span>
      {/* <ReactMarkdown children={about} remarkPlugins={[remarkGfm]} /> */}
      <Button
        loading={loading}
        block
        onClick={() => {
          if (idea.length > 0) {
            generateMetadata();
          }
        }}
      >
        {loading ? "Cooking the Idea 💡" : "Mint Idea 💡"}
      </Button>
    </Modal>
  );
};
